.flexbox {
    display: flex;
    background-color: gray;
    /*justify content aligns across the main axis, not horizontally, which is why flex-direction column aligns vertically instead*/
    /*differences between space between and around, and evenly
    between: only changes spacing between the items, not around the edges of them
    around: modifies spacing around the items including start and stuff
    evenly: even space around all the things

    cross axis and main axis
    the main axis is horizonal default, but a column direction will make it vertical instead
    cross axis is vertical by default, but column direction makes it horizontal instead
    
    align-items:
    aligns on the cross axis
    stretch makes items fill the cross axis
    baseline aligns the bottom of all the text in an item
    
    align-content: 
    aligns the rows/columns instead of the items
    space between and space around, work the same as justify content's thingy
    it only works on multi line/column containers, so it wont do stuff if there isnt' enough stuff
    
    gap/row-gap/column-gap
    this controls how much space between each item, can also be used outside of flexbox
    applies spacing between items and not the edges of the flex container, unlike margin which does affect that
    
    justify-self is used for grid, so not for flexbox
    but align-self is used for flexbox

    order: 
    normally done in DOM order
    default value is 0 i think
    if an item has a different order value, it'll be in a different place
    makes sense to me

    flex-grow: 
    this is a useful thingy
    basically, each item in a flex container has a proportion related to whatever the value other items have
    everything else with grow 1 but one with grow 2 will be as below, and same with grow 2 and then grow 4
    no negative numbers
    default 0
    example: if everything has flex-grow: 1, but something has flex-grow: 2, then the item with flex-grow: 2 will
    attempt to take up twice as much space as the other items, if it can't it'll remain the same size as the others
    example 2: 
    3 items, left, middle, and right
    left has 1, right has 1, but middle has 3
    middle will attempt to be bigger than the other items if possible
    it doesn't work if the width is already set, maybe, not sure
    
    flex-shrink:
    works same as flex-grow, but specifies what item should shrink first due to screen size, and in what
    proportion it does shrink compared to others
    default 0, negatives are invalid, same proportion rules as flex-grow

    flex-basis: 
    defines default size of an element before remaining space is used for other stuff

    flex: 
    shorthand for flex-grow, flex-shrink, and flex-basis
    default 0 1 auto

    align-self:
    aligns a specific item somewhere else along the cross axis compared to other items
    same syntax as align-items
    */

    
}

.flexItem {
    background-color: lightgray;
    padding: 50px;
    margin: 50px;
}